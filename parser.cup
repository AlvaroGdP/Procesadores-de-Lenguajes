
/* ----------------------Seccion de declaraciones package e imports--------------------*/

import java_cup.runtime.*;
import java.io.*;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Enumeration;


/* ----------------------Seccion componentes de codigo de usuario --------------------*/

parser code {:

	static boolean do_debug_parse = false;

	public static void main(String args[]) {

		try{
			FileReader fr = new FileReader(args[0]);

			if(do_debug_parse){
				new parser(new analex_cup(fr)).debug_parse();
			}else{
				new parser(new analex_cup(fr)).parse();
			}

		}catch (FileNotFoundException e) {
			System.out.println("Archivo '"+ args[0]+"' no encontrado");
			System.exit(1);
    }catch (Exception e){
			System.exit(1);
		}
 	}


	/* Metodo invocado por cup */
	public void report_error(String message, Object info) {
		 StringBuilder m = new StringBuilder("Error");
		 if (info instanceof java_cup.runtime.Symbol) {
				 java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				 if (s.left >= 0) {
						 m.append(" en linea "+(s.left+1));
						 if (s.right >= 0)
								 m.append(", columna "+(s.right+1));
				 }
		 }
		 m.append(" : "+message);
		 System.err.println(m);
 }


/* Metodo invocado por cup */
 @Override
 public void report_fatal_error(String message, Object info) throws java.lang.Exception {
	System.out.println("Error fatal. Imposible recuperarse y continuar ejecución.");
	System.exit(1);
 }

:}

action code{:
	Hashtable<String, String> codigo_table = new Hashtable<String, String>();
	Hashtable<String, String> eventos_table = new Hashtable<String, String>();
	Hashtable<String, Moore> maquinas = new Hashtable<String, Moore>();
	Moore current;
	boolean error = false;
	String inicial = null;

	protected void escribir(){
		if (!error){
			Enumeration<String> claves = maquinas.keys();
			MiWriter mw = new MiWriter();
			while(claves.hasMoreElements()){
				String actual = claves.nextElement();
				error = mw.comprobaciones(actual, maquinas.get(actual), eventos_table, codigo_table);
				if (!error){
					mw.write(actual, maquinas.get(actual), eventos_table, codigo_table);
				}
				error = false;
			}
		}
	}

:}



/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/

terminal CODE_TOKEN, CODIGO, BEHAVIOURS, LLAVE_I, LLAVE_D, PAR_I, PAR_D, ID, ASIGNACION, EVENTS;
terminal ENTRADA, PUNTO_COMA, COMA, MOORE, STATES, TRANSITIONS, OUTPUT;

non terminal programa, bloque_code, codigo, comportamientos, eventos, evento, valor;
non terminal cuerpo, maquinas, maquina, cuerpo_maquina, estados, transiciones, salidas;
non terminal estado, transicion, salida, tripla_transicion, tupla_salida, codigo_individual;


/* -------------Declaracion de precedencias -----------*/



/* --------------Declaracion de la gramatica -----------*/

programa ::= bloque_code comportamientos eventos cuerpo {: escribir(); :}
		| error {: System.out.println("ERROR Sintactico. Posible causa: bloque no delimitado por '{'"); error=true; :};

bloque_code ::= CODE_TOKEN LLAVE_I codigo LLAVE_D | CODE_TOKEN LLAVE_I LLAVE_D
		| ;
codigo ::= codigo_individual | codigo_individual codigo;
codigo_individual ::= ID:id ASIGNACION CODIGO:code {: codigo_table.put(id+"", code+""); :}
		| error {: System.err.println("ERROR en declaración de código de usuario (bloques 'code' o 'behaviours')."); error=true; :};

comportamientos ::= BEHAVIOURS LLAVE_I codigo LLAVE_D
		| BEHAVIOURS LLAVE_I LLAVE_D {: System.err.println("ERROR: Bloque 'behaviours' vacio"); error = true; :}
		| {: System.err.println("ERROR: Bloque 'behaviours' requerido"); error = true; :};

eventos ::= EVENTS LLAVE_I evento LLAVE_D
		| EVENTS LLAVE_I LLAVE_D {: System.err.println("ERROR: Bloque 'events' vacio"); error = true; :}
		| {: System.err.println("ERROR: Bloque 'events' requerido"); error = true; :};

evento ::= ID:id ASIGNACION PAR_I valor:r PAR_D PUNTO_COMA {: eventos_table.put(id+"", r+"");:}
		| ID:id ASIGNACION PAR_I valor:r PAR_D PUNTO_COMA evento {: eventos_table.put(id+"", r+"");:}
		| error {: System.err.println("ERROR en bloque 'events'."); error=true; :};

valor ::= ENTRADA:en {:RESULT = en; :}
		| ENTRADA:en COMA valor:r {:RESULT = en+","+r; :};

cuerpo ::= maquinas | {: System.err.println("ERROR: Sin máquinas declaradas"); error = true; :};

maquinas ::= maquina | maquina maquinas;
maquina ::= MOORE ID:id LLAVE_I cuerpo_maquina LLAVE_D {: current.setInicial(inicial); maquinas.put(id+"", current); :}
		| MOORE ID:id LLAVE_I cuerpo_maquina {: System.out.println("ERROR en máquina "+id+". Posible causa: falta '}'"); error = true; :};

cuerpo_maquina ::= estados salidas transiciones;

// Aceptaremos ambas formas
estados ::= STATES estado PUNTO_COMA
					| STATES PAR_I estado PAR_D PUNTO_COMA
					| error {: System.out.println("ERROR en declaración 'states'"); error=true; :};

estado ::= ID:id {: current = new Moore(); current.getEstados().add(id+""); inicial = id+"";:}
					| ID:id COMA estado {: current.getEstados().add(id+""); inicial = id+"";:};

salidas ::= OUTPUT salida PUNTO_COMA;
salida ::= PAR_I tupla_salida PAR_D |
					 PAR_I tupla_salida PAR_D COMA salida
					 | error {: System.out.println("ERROR en declaración 'output'"); error=true; :};

tupla_salida ::= ID:id1 COMA ID:id2 {: current.getSalidas().put(id1+"", id2+""); :};

transiciones ::= TRANSITIONS transicion PUNTO_COMA;
transicion ::= PAR_I tripla_transicion PAR_D
					| PAR_I tripla_transicion PAR_D COMA transicion
					| error {: System.out.println("ERROR en declaración 'transitions'"); error=true; :};

tripla_transicion ::= ID:id1 COMA ID:id2 COMA ID:id3 {: String tran[] = {id1+"", id2+"", id3+""}; current.getTransiciones().add(tran);:};
