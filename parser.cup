
/* ----------------------Seccion de declaraciones package e imports--------------------*/

import java_cup.runtime.*;
import java.io.*;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Enumeration;


/* ----------------------Seccion componentes de codigo de usuario --------------------*/

parser code {:

	static boolean do_debug_parse = false;

	public static void main(String args[]) {

		try{
			FileReader fr = new FileReader(args[0]);

			if(do_debug_parse){
				new parser(new analex_cup(fr)).debug_parse();
			}else{
				new parser(new analex_cup(fr)).parse();
			}

		}catch (FileNotFoundException e) {
			System.out.println("Archivo '"+ args[0]+"' no encontrado");
			System.exit(1);
    }catch (Exception e){
			System.exit(1);
		}
    System.out.println("Análisis correcto");
 	}


	/* Metodo invocado por cup */
	public void report_error(String message, Object info) {
		 StringBuilder m = new StringBuilder("Error");
		 if (info instanceof java_cup.runtime.Symbol) {
				 java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				 if (s.left >= 0) {
						 m.append(" en linea "+(s.left+1));
						 if (s.right >= 0)
								 m.append(", columna "+(s.right+1));
				 }
		 }
		 m.append(" : "+message);
		 System.err.println(m);
 }


/* Metodo invocado por cup */
 @Override
 public void report_fatal_error(String message, Object info) throws java.lang.Exception {
	System.out.println("Error fatal. Imposible recuperarse y continuar ejecución.");
	System.exit(1);
 }

:}

action code{:
	Hashtable<String, String> codigo_table = new Hashtable<String, String>();
	Hashtable<String, String> eventos_table = new Hashtable<String, String>();
	Hashtable<String, Moore> maquinas = new Hashtable<String, Moore>();
	Moore current;
	boolean error = false;
	String inicial = null;

	protected void escribir(){
		if (!error){
			Enumeration<String> claves = maquinas.keys();
			while(claves.hasMoreElements()){
				String actual = claves.nextElement();
				String nombre_archivo = actual+".py";
				PrintWriter writer = null;
				try{
					writer = new PrintWriter(nombre_archivo, "UTF-8");
				}catch (FileNotFoundException fnf){
					//
				}catch (Exception e){
					System.out.println("Exception desconocida: "+ e.getMessage());
				}
				write_cabecera(writer, actual);
				write_output(writer, actual);


				// Transiciones
				writer.println("\n\ndef transition(estado, entrada):");
				String linea = "\tif estado ==";
				LinkedList<String[]> transiciones = maquinas.get(actual).getTransiciones();
				int index = 0;
				String estado_inicio = transiciones.get(index)[0];
				String estado_destino = transiciones.get(index)[1];
				String entrada_id = transiciones.get(index)[2];
				linea = linea + "'"+estado_inicio+"'  and entrada == ";
				String entrada = eventos_table.get(entrada_id);
				entrada = procesar_entrada(entrada);
				linea = linea + entrada +":";
				writer.println(linea);
				writer.println("\t\tnuevo_estado = '"+estado_destino+"'\n\t\tprint('[Transicion]\\n\\t' + estado + ', '+ str(entrada) + ' ----> ' + nuevo_estado+'\\n')\n\t\treturn nuevo_estado");
				writer.flush();
			}
			System.out.println(claves.nextElement());
		}
	}

	public void write_cabecera(PrintWriter writer, String actual){
		// Codigo usuario
		writer.println("# Sección código-usuario #############");
		String codigo = codigo_table.get(actual);
		codigo = codigo.substring(2, codigo.length()-2);
		writer.println(codigo);
		writer.println("######################################");

		// procesar_entrada
		writer.println("\nimport sys\ndef procesar_entrada(str):\n\tsplitted = str.split(',')\n\tcpy = []");
		writer.println("\tfor elem in splitted:\n\t\telem = elem.replace('\\t', '')\n\t\telem = elem.replace(' ', '')");
		writer.println("\t\tcpy.append(elem)\n\treturn cpy\n\n");
	}

	public void write_output(PrintWriter writer, String actual){
		// output
		writer.println("def output(estado):");
		Hashtable<String, String> outputs = maquinas.get(actual).getSalidas();
		Enumeration<String> estados = outputs.keys();
		String estado_actual = estados.nextElement();
		String linea = "\tif estado == "+"'"+estado_actual+"':";
		writer.println(linea);
		String comp_id = maquinas.get(actual).getSalidas().get(estado_actual);

		// Debemos procesar linea a linea de codigo
		String codigo = codigo_table.get(comp_id);
		codigo = procesar_codigo(codigo);
		writer.println(codigo);

		while (estados.hasMoreElements()){
			estado_actual = estados.nextElement();
			linea = "\telif estado == "+"'"+estado_actual+"':";
			writer.println(linea);
			comp_id = maquinas.get(actual).getSalidas().get(estado_actual);
			codigo = codigo_table.get(comp_id);
			codigo = procesar_codigo(codigo);
			writer.println(codigo);
		}
		writer.println("\telse:\n\t\tprint('Comportamiento indefinido para el estado '+estado+'. Abortando ejecución.')\n\t\tsys.exit(0)");
	}

	public String procesar_codigo(String codigo){
		codigo = codigo.substring(2, codigo.length()-2);
		codigo = codigo.replace("\n", "\n\t\t");
		return codigo;
	}

	public String procesar_entrada(String entrada){
		String splitted[] = entrada.split(",");
		String entradas = "[";
		for (String elem: splitted){
			entradas = entradas + "'"+elem+"', ";
		}
		entradas = entradas.substring(0, entradas.length()-2);
		entradas = entradas + "]";
		System.out.println(entradas);
		return entrada;
	}

:}



/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/

terminal CODE_TOKEN, CODIGO, BEHAVIOURS, LLAVE_I, LLAVE_D, PAR_I, PAR_D, ID, ASIGNACION, EVENTS;
terminal ENTRADA, PUNTO_COMA, COMA, MOORE, STATES, TRANSITIONS, OUTPUT;

non terminal programa, bloque_code, codigo, comportamientos, eventos, evento, valor;
non terminal cuerpo, maquinas, maquina, cuerpo_maquina, estados, transiciones, salidas;
non terminal estado, transicion, salida, tripla_transicion, tupla_salida, codigo_individual;


/* -------------Declaracion de precedencias -----------*/



/* --------------Declaracion de la gramatica -----------*/

programa ::= bloque_code comportamientos eventos cuerpo {: escribir(); :};

bloque_code ::= CODE_TOKEN LLAVE_I codigo LLAVE_D;
codigo ::= codigo_individual | codigo_individual codigo;
codigo_individual ::= ID:id ASIGNACION CODIGO:code {: codigo_table.put(id+"", code+""); :};
comportamientos ::= BEHAVIOURS LLAVE_I codigo LLAVE_D;

eventos ::= EVENTS LLAVE_I evento LLAVE_D;
evento ::= ID:id ASIGNACION PAR_I valor:r PAR_D PUNTO_COMA {: eventos_table.put(id+"", r+"");:}
		| ID:id ASIGNACION PAR_I valor:r PAR_D PUNTO_COMA evento {: eventos_table.put(id+"", r+"");:};
valor ::= ENTRADA:en {:RESULT = en; :}
		| ENTRADA:en COMA valor:r {:RESULT = en+","+r; :};

cuerpo ::= maquinas;

maquinas ::= maquina | maquina maquinas;
maquina ::= MOORE ID:id LLAVE_I cuerpo_maquina LLAVE_D {: current.setInicial(inicial); maquinas.put(id+"", current); :};
cuerpo_maquina ::= estados salidas transiciones;

estados ::= STATES estado PUNTO_COMA;
estado ::= ID:id {: current = new Moore(); current.getEstados().add(id+""); inicial = id+"";:}
					| ID:id COMA estado {: current.getEstados().add(id+""); inicial = id+"";:};

salidas ::= OUTPUT salida PUNTO_COMA;
salida ::= PAR_I tupla_salida PAR_D |
					 PAR_I tupla_salida PAR_D COMA salida;

tupla_salida ::= ID:id1 COMA ID:id2 {: current.getSalidas().put(id1+"", id2+""); :};

transiciones ::= TRANSITIONS transicion PUNTO_COMA;
transicion ::= PAR_I tripla_transicion PAR_D
					| PAR_I tripla_transicion PAR_D COMA transicion;
tripla_transicion ::= ID:id1 COMA ID:id2 COMA ID:id3 {: String tran[] = {id1+"", id2+"", id3+""}; current.getTransiciones().add(tran);:};
