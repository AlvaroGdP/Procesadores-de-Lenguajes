lexer grammar Moor_Lex;

CODE_TOKEN :'code';
BEHAVIOURS : 'behaviours';
EVENTS : 'events' -> pushMode(BLOQUE_EVENTOS);
MOORE : 'moore';
STATES : 'states';
OUTPUT : 'output';
TRANSITIONS : 'transitions';
LLAVE_I : '{' ;
LLAVE_D : '}' ;
PAR_I : '(' ;
PAR_D : ')' ;
PUNTO_COMA : ';' ;
ASIGNACION : ':=' ;
COMA : ',' ;
ID : [a-zA-Z][a-zA-Z0-9_]* ;
ENTRADA : [a-zA-Z0-9]+ ;
CODIGO : '/*' ~[*/]* '*/';
COMENTARIO : '#' ~[\r\n\f]* -> skip;
COMENTARIO_ML : '\'\'\'' ~['\'\'\'']* '\'\'\'' ->type(COMENTARIO),skip;
NL  : ('\n' | '\r') ->skip ;
BLANCO : ' ' -> skip;
TAB :  '\t' -> skip;
ANY : . ;


mode BLOQUE_EVENTOS;
CODE_TOKEN2 :'code'           ->type(CODE_TOKEN);
BEHAVIOURS2 : 'behaviours'    ->type(BEHAVIOURS);
EVENTS2 : 'events'            ->type(EVENTS);
MOORE2 : 'moore'              ->type(MOORE);
STATES2 : 'states'            ->type(STATES);
OUTPUT2 : 'output'            ->type(OUTPUT);
TRANSITIONS2 : 'transitions'  ->type(TRANSITIONS);
LLAVE_I2 : '{'                ->type(LLAVE_I);
LLAVE_D2 : '}'                ->popMode,type(LLAVE_D);
PAR_I2 : '('                  ->type(PAR_I);
PAR_D2 : ')'                  ->type(PAR_D);
PUNTO_COMA2 : ';'             ->type(PUNTO_COMA);
ASIGNACION2 : ':='            ->pushMode(EVENTO), type(ASIGNACION);
COMA2 : ','                   ->type(COMA);
ID2 : [a-zA-Z][a-zA-Z0-9_]*   ->type(ID);
ENTRADA2 : [a-zA-Z0-9]+       ->type(ENTRADA);
CODIGO2 : '/*' ~[*/]* '*/'    ->type(CODIGO);
COMENTARIO2 : '#' ~[\r\n\f]*  ->type(COMENTARIO),skip;
COMENTARIO_ML2 : '\'\'\'' ~['\'\'\'']* '\'\'\'' ->type(COMENTARIO),skip;
NL2  : ('\n' | '\r')           ->type(NL),skip;
BLANCO2 : ' '                  -> type(BLANCO), skip;
TAB2 :  '\t'                   -> type(TAB),skip;
ANY2 : .                       ->type(ANY);

mode EVENTO;
CODE_TOKEN3 :'code'           ->type(CODE_TOKEN);
BEHAVIOURS3 : 'behaviours'    ->type(BEHAVIOURS);
EVENTS3 : 'events'            ->type(EVENTS);
MOORE3 : 'moore'              ->type(MOORE);
STATES3 : 'states'            ->type(STATES);
OUTPUT3 : 'output'            ->type(OUTPUT);
TRANSITIONS3 : 'transitions'  ->type(TRANSITIONS);
LLAVE_I3 : '{'                ->type(LLAVE_I);
LLAVE_D3 : '}'                ->popMode,type(LLAVE_D);
PAR_I3 : '('                  ->type(PAR_I) ;
PAR_D3 : ')'                  ->type(PAR_D), popMode;
PUNTO_COMA3 : ';'             ->type(PUNTO_COMA);
ASIGNACION3 : ':='            ->type(ASIGNACION);
COMA3 : ','                   ->type(COMA);
ENTRADA3 : [a-zA-Z0-9]+       ->type(ENTRADA);
CODIGO3 : '/*' ~[*/]* '*/'    ->type(CODIGO);
COMENTARIO3 : '#' ~[\r\n\f]*  ->type(COMENTARIO),skip;
COMENTARIO_ML3 : '\'\'\'' ~['\'\'\'']* '\'\'\'' ->type(COMENTARIO),skip;
NL3  : ('\n' | '\r')          -> type(NL), skip;
BLANCO3 : ' '                 -> type(BLANCO), skip;
TAB3 :  '\t'                  -> type(TAB), skip;
ANY3 : .                       ->type(ANY);
